/*
 * @lc app=leetcode id=45 lang=cpp
 *
 * [45] Jump Game II
 *
 * https://leetcode.com/problems/jump-game-ii/description/
 *
 * algorithms
 * Medium (34.03%)
 * Likes:    5412
 * Dislikes: 211
 * Total Accepted:    418.1K
 * Total Submissions: 1.2M
 * Testcase Example:  '[2,3,1,1,4]'
 *
 * Given an array of non-negative integers nums, you are initially positioned
 * at the first index of the array.
 *
 * Each element in the array represents your maximum jump length at that
 * position.
 *
 * Your goal is to reach the last index in the minimum number of jumps.
 *
 * You can assume that you can always reach the last index.
 *
 *
 * Example 1:
 *
 *                0 1 2 3 4
 * Input: nums = [2,3,1,1,4]
 * Output: 2
 * Explanation: The minimum number of jumps to reach the last index is 2. Jump
 * 1 step from index 0 to 1, then 3 steps to the last index.
 *
 *
 * Example 2:
 *
 *                0 1 2 3 4
 * Input: nums = [2,3,0,1,4]
 * Output: 2
 *
 *
 *
 * Constraints:
 *
 *
 * 1 <= nums.length <= 10^4
 * 0 <= nums[i] <= 1000
 *
 *
 */

#include "misc.h"
#include <iostream>
#include <vector>
using namespace std;
// @lc code=start
#include <algorithm>

class Solution {
  public:
    int jump(vector<int> &nums) {
        auto const size = nums.size();
        auto farest     = vector<int>(size);  // farest a loc can jump to
        for (int i = 0; i < size; i++)
            farest[i] = i + nums[i];

        // auto dp = vector<vector<int>>(size, vector<int>(size, __INT_MAX__ - 1));
        // for (int i = size - 1; i >= 0; i--) {
        //     dp[i][i] = 0;
        //     for (int j = i + 1; j < size; j++) {
        //         if (j <= farest[i])
        //             dp[i][j] = 1;
        //         else
        //             for (int k = i; k < j; k++)
        //                 if (j <= farest[k] && dp[i][k] + 1 <= dp[i][j])
        //                     dp[i][j] = dp[i][k] + 1;
        //     }
        // }
        // return dp[0][size - 1];

        auto leastJumps =
            vector<int>(size, __INT_MAX__ - 1);  // min jump times from i to last
        leastJumps.back() = 0;
        for (int i = size - 2; i >= 0; i--) {
            if (farest[i] >= size - 1)  // can reach last from i
                leastJumps[i] = 1;
            else
                for (int j = i + 1; j < size - 1; j++)
                    if (farest[i] >= j  // can reach j from i
                        && leastJumps[j] + 1 <= leastJumps[i])
                        leastJumps[i] = leastJumps[j] + 1;
        }
        return leastJumps[0];
    }
};
// @lc code=end

int main(int argc, char const *argv[]) {
    vector<int> nums = {8, 4, 8, 2, 5, 6, 5, 3, 5, 3, 3, 1, 6, 5, 8, 7, 4, 6, 8, 2, 3, 1, 2,
        7, 5, 1, 2, 1, 8, 1, 3, 3, 7, 8, 8, 4, 2, 6, 5, 1, 7, 5, 6, 8, 2, 7, 5, 6, 7, 2, 2, 5,
        7, 4, 4, 6, 8, 7, 2, 4, 8, 5, 2, 3, 6, 3, 5, 1, 6, 8, 3, 1, 7, 7, 1, 8, 2, 3, 5, 8, 6,
        5, 3, 4, 1, 8, 7, 3, 7, 2, 1, 1, 2, 8, 5, 1, 8, 3, 5, 5, 3, 3, 8, 8, 1, 6, 1, 8, 5, 1,
        1, 6, 6, 1, 8, 4, 2, 3, 4, 6, 4, 8, 6, 7, 8, 6, 2, 3, 2, 6, 7, 1, 3, 4, 1, 5, 5, 3, 6,
        5, 1, 5, 5, 1, 1, 1, 4, 2, 5, 2, 6, 1, 5, 3, 5, 3, 7, 6, 7, 7, 1, 1, 6, 3, 5, 2, 6, 7,
        5, 8, 2, 1, 2, 1, 4, 7, 3, 6, 7, 2, 7, 1, 6, 4, 4, 6, 6, 6, 6, 3, 4, 5, 5, 1, 5, 3, 5,
        7, 3, 4, 5, 3, 1, 3, 7, 6, 2, 2, 5, 7, 7, 6, 3, 4, 2, 5, 4, 1, 3, 3, 6, 2, 1, 1, 3, 5,
        7, 4, 5, 4, 8, 4, 5, 7, 6, 7, 5, 5, 5, 4, 1, 6, 1, 6, 6, 3, 1, 8, 6, 3, 8, 5, 8, 7, 6,
        8, 4, 5, 1, 5, 7, 7, 1, 3, 5, 5, 4, 1, 4, 8, 2, 5, 5, 6, 3, 4, 8, 1, 5, 4, 1, 8, 2, 6,
        5, 4, 8, 8, 5, 7, 1, 8, 4, 1, 5, 5, 7, 1, 6, 5, 8, 4, 3, 3, 8, 7, 1, 4, 3, 1, 4, 5, 2,
        7, 8, 3, 4, 4, 6, 7, 7, 5, 4, 3, 2, 4, 2, 5, 2, 6, 8, 8, 2, 7, 8, 2, 6, 8, 5, 6, 3, 3,
        4, 2, 3, 1, 4, 1, 8, 8, 2, 5, 2, 1, 5, 8, 2, 8, 2, 4, 6, 8, 6, 6, 6, 5, 6, 8, 5, 7, 2,
        1, 5, 2, 8, 8, 7, 1, 1, 5, 2, 5, 6, 6, 3, 8, 3, 5, 6, 4, 5, 7, 8, 2, 6, 7, 4, 5, 7, 3,
        8, 2, 4, 5, 1, 8, 7, 5, 2, 8, 1, 7, 1, 3, 1, 1, 4, 4, 1, 1, 3, 3, 3, 8, 1, 8, 4, 5, 4,
        7, 1, 1, 2, 6, 7, 5, 8, 8, 1, 3, 8, 2, 7, 4, 8, 8, 1, 2, 5, 5, 5, 7, 4, 2, 2, 4, 6, 7,
        6, 4, 3, 5, 8, 1, 7, 6, 6, 2, 1, 6, 2, 5, 2, 8, 3, 3, 5, 7, 2, 1, 8, 5, 5, 6, 8, 8, 8,
        8, 1, 3, 5, 2, 1, 6, 3, 8, 4, 7, 8, 2, 8, 4, 2, 4, 8, 4, 2, 4, 6, 3, 7, 2, 1, 3, 5, 2,
        5, 4, 7, 8, 7, 6, 3, 3, 7, 6, 2, 4, 6, 7, 8, 6, 6, 4, 2, 8, 7, 5, 5, 8, 8, 8, 1, 2, 6,
        1, 8, 1, 1, 4, 2, 7, 8, 5, 6, 4, 7, 3, 7, 3, 2, 6, 5, 7, 8, 5, 1, 3, 3, 3, 6, 8, 7, 3,
        3, 4, 7, 5, 8, 2, 4, 7, 8, 1, 6, 8, 7, 5, 4, 2, 3, 3, 8, 8, 6, 3, 8, 2, 8, 6, 2, 2, 5,
        8, 3, 7, 5, 8, 5, 7, 2, 7, 1, 7, 2, 3, 1, 1, 8, 2, 4, 8, 8, 1, 2, 1, 2, 2, 8, 6, 6, 5,
        1, 1, 1, 5, 1, 8, 5, 6, 1, 4, 4, 8, 5, 8, 3, 3, 3, 5, 2, 5, 3, 7, 3, 5, 4, 3, 2, 4, 8,
        7, 6, 4, 4, 4, 3, 8, 7, 8, 2, 4, 6, 5, 6, 3, 4, 5, 3, 2, 6, 6, 7, 2, 5, 1, 5, 6, 2, 3,
        4, 3, 3, 3, 3, 2, 4, 3, 7, 1, 3, 5, 3, 2, 5, 5, 7, 6, 1, 2, 3, 2, 3, 8, 3, 6, 7, 4, 3,
        8, 3, 7, 2, 7, 5, 2, 6, 8, 2, 5, 1, 2, 8, 7, 8, 3, 1, 1, 7, 3, 6, 5, 7, 2, 8, 3, 3, 7,
        2, 3, 7, 6, 1, 8, 4, 5, 3, 3, 8, 5, 1, 1, 7, 3, 6, 1, 7, 6, 2, 2, 6, 1, 6, 8, 1, 7, 4,
        1, 3, 4, 6, 6, 4, 4, 3, 4, 4, 7, 5, 2, 2, 8, 7, 6, 5, 4, 3, 2, 8, 8, 2, 1, 3, 5, 7, 5,
        2, 4, 7, 2, 2, 8, 3, 8, 7, 4, 8, 5, 3, 3, 5, 5, 2, 1, 7, 6, 7, 1, 3, 3, 2, 2, 8, 8, 6,
        2, 8, 3, 2, 3, 8, 6, 4, 7, 7, 8, 2, 3, 6, 4, 8, 3, 3, 2, 1, 7, 6, 3, 8, 4, 8, 3, 1, 6,
        3, 1, 2, 8, 8, 2, 2, 7, 2, 5, 7, 3, 5, 8, 8, 3, 8, 6, 6, 2, 6, 6, 4, 7, 6, 1, 7, 8, 6,
        8, 1, 2, 3, 3, 6, 2, 7, 1, 2, 1, 1, 6, 8, 6, 6, 1, 2, 6, 8, 2, 4, 7, 1, 1, 3, 3, 7, 4,
        8, 3, 4, 6, 3, 6, 1, 6, 4, 3, 6, 7, 4, 8, 5, 7, 2, 3, 1, 5, 3, 5, 3, 3, 3, 6, 8, 6, 6,
        8, 3, 8, 3, 6, 2, 6, 4, 1, 6, 8, 1, 1, 6, 6, 6, 3, 6, 4, 7, 1, 1, 4, 2, 5, 5, 8, 2, 6,
        8, 1, 7, 5, 4, 7, 4, 7, 3, 1, 5, 7, 1, 5, 1, 1, 8, 2, 2, 3, 3, 4, 3, 7, 6, 1, 7, 2, 8,
        5, 6, 5, 4, 8, 2, 4, 3, 1, 2, 7, 3, 3, 3, 3, 4, 6, 2, 1, 4, 8, 1, 4, 3, 2, 7, 6, 8, 8,
        7, 2, 3, 1, 4, 1, 3, 3, 8, 8, 6, 2, 3, 3, 7, 3, 1, 5, 5, 2, 8, 8, 3, 7, 7, 7, 7, 3, 7,
        3, 7, 4, 5, 5, 8, 4, 8, 1, 4, 3, 7, 8, 5, 7, 1, 6, 2, 4, 3, 6, 5, 7, 2, 7, 5, 1, 1, 6,
        3, 3, 7, 7, 7, 4, 6, 7, 2, 3, 2, 8, 5, 7, 8, 7, 2, 7, 7, 8, 7, 3, 4, 4, 5, 3, 6, 2, 2,
        1, 4, 8, 5, 1, 2, 8, 4, 7, 8, 2, 1, 4, 4, 6, 5, 6, 2, 2, 6, 3, 1, 8, 1, 3, 3, 3, 8, 1,
        3, 7, 7, 5, 8, 3, 7, 3, 8, 3, 7, 8, 2, 1, 4, 4, 2, 7, 3, 8, 1, 8, 4, 8, 8, 6, 6, 8, 5,
        2, 6, 2, 3, 6, 1, 5, 2, 4, 6, 5, 6, 8, 3, 8, 2, 1, 8, 6, 8, 3, 2, 4, 3, 4, 7, 5, 6, 6,
        6, 4, 8, 1, 5, 6, 1, 1, 2, 6, 4, 3, 2, 1, 2, 4, 1, 4, 4, 8, 2, 8, 8, 2, 1, 2, 4, 4, 5,
        1, 5, 5, 6, 2, 4, 8, 4, 7, 3, 4, 2, 5, 7, 7, 3, 5, 5, 8, 5, 7, 5, 4, 4, 6, 5, 6, 5, 2,
        5, 7, 4, 3, 5, 8, 3, 7, 3, 7, 3, 7, 5, 8, 4, 3, 3, 4, 6, 1, 3, 3, 6, 2, 4, 5, 4, 4, 8,
        4, 6, 5, 1, 1, 2, 4, 7, 3, 8, 8, 1, 2, 3, 6, 7, 7, 4, 5, 3, 5, 7, 3, 4, 8, 8, 6, 6, 2,
        3, 3, 8, 3, 1, 3, 3, 2, 8, 3, 5, 7, 2, 6, 2, 7, 3, 3, 3, 7, 5, 1, 2, 7, 8, 4, 7, 1, 4,
        6, 5, 1, 2, 6, 3, 7, 7, 5, 4, 8, 7, 1, 1, 7, 2, 4, 7, 8, 5, 2, 6, 6, 5, 4, 8, 6, 1, 4,
        5, 5, 3, 7, 4, 4, 2, 3, 6, 8, 6, 8, 4, 1, 8, 2, 3, 8, 3, 1, 6, 2, 8, 6, 1, 4, 3, 4, 8,
        6, 6, 5, 8, 7, 4, 2, 1, 3, 7, 6, 7, 1, 3, 2, 2, 8, 1, 5, 2, 6, 7, 8, 2, 8, 5, 2, 3, 7,
        7, 6, 8, 3, 4, 6, 8, 2, 8, 7, 1, 4, 1, 3, 6, 1, 8, 2, 8, 6, 8, 7, 1, 2, 5, 6, 5, 3, 4,
        7, 5, 3, 4, 8, 4, 8, 3, 2, 7, 7, 6, 2, 4, 8, 1, 1, 2, 8, 6, 6, 2, 2, 4, 3, 8, 6, 7, 7,
        1, 8, 7, 2, 2, 3, 2, 4, 1, 2, 6, 3, 6, 8, 5, 1, 6, 4, 7, 4, 2, 4, 5, 6, 8, 3, 7, 1, 5,
        2, 8, 1, 2, 6, 3, 5, 4, 3, 3, 8, 2, 7, 1, 2, 1, 1, 8, 7, 6, 3, 8, 2, 8, 4, 2, 1, 1, 2,
        3, 8, 8, 6, 5, 4, 1, 5, 5, 7, 8, 2, 8, 6, 6, 3, 7, 1, 5, 2, 2, 5, 2, 6, 5, 7, 3, 2, 8,
        7, 8, 3, 7, 6, 5, 6, 7, 3, 4, 1, 3, 2, 3, 6, 4, 6, 1, 1, 8, 3, 2, 2, 1, 1, 4, 3, 4, 6,
        6, 2, 8, 1, 6, 6, 1, 1, 6, 8, 8, 6, 4, 8, 3, 4, 5, 5, 5, 8, 8, 5, 8, 2, 1, 4, 6, 6, 7,
        3, 6, 8, 4, 3, 4, 6, 3, 7, 8, 6, 1, 7, 1, 5, 1, 1, 6, 3, 3, 3, 7, 4, 1, 3, 1, 5, 1, 5,
        4, 3, 4, 4, 6, 2, 3, 8, 0, 0, 0, 0, 0, 0, 0};
    cout << Solution().jump(nums) << endl;
    return 0;
}
